{"ast":null,"code":"var _jsxFileName = \"/home/bryan/Programa\\xE7\\xE3o/WebDev/Portifolio - Bryan Diniz/web/src/pages/Projects/Chat/index.js\";\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport socket from \"../../../services/socket\";\nimport { Container, PageTitle, MessageContainer, Message, MessageUser, MessageText, MessageDate, InputGroup, InputText, LabelInput, InputMessage, SendButtonInput, InputTextBox, Button } from './styles';\n/*\nsocket.on('recivedMessage', message => {\n    //setMessages([...messages, message]);\n\n    console.log(message);\n\n    const messageContainer = document.getElementById('messageContainer');\n\n    messageContainer.innerHTML +=\n    `<Message key=\"${message.id}\">\n        <MessageText>\n            <MessageUser>${message.username}</MessageUser>\n                ${message.messageText}\n            </MessageText>\n        <MessageDate>${message.date}</MessageDate>\n    </Message>`\n});\n*/\n\nfunction Chat() {\n  const [messages, setMessages] = useState([]);\n  const messageText = useRef();\n  const username = useRef();\n  const [message, setMessage] = useState({});\n  useMemo(() => {\n    socket.on('recivedMessage', message => {\n      setMessage(message);\n      console.log(message);\n    });\n  }, []);\n  useEffect(() => {\n    setMessages([...messages, message]);\n  }, [message]);\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    const date = new Date().toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, \"$1\");\n    ;\n    const newMessage = {\n      id: 0,\n      username: username.current.value,\n      messageText: messageText.current.value,\n      date\n    };\n    socket.emit('sendMessage', newMessage); //setMessages([...messages, newMessage]);\n\n    messageText.current.value = '';\n  }\n\n  return React.createElement(Container, {\n    autoComplete: \"off\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(InputGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(LabelInput, {\n    htmlFor: \"username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Username\"), React.createElement(InputText, {\n    id: \"username\",\n    ref: username,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })), React.createElement(MessageContainer, {\n    id: \"messageContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, messages.map(m => React.createElement(Message, {\n    key: m.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(MessageText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(MessageUser, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, m.username), m.messageText), React.createElement(MessageDate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, m.date)))), React.createElement(InputGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(InputMessage, {\n    id: \"message\",\n    placeholder: \"Enviar mensagem...\",\n    ref: messageText,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(SendButtonInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Enviar\")));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/bryan/ProgramaÃ§Ã£o/WebDev/Portifolio - Bryan Diniz/web/src/pages/Projects/Chat/index.js"],"names":["React","useState","useEffect","useRef","useMemo","socket","Container","PageTitle","MessageContainer","Message","MessageUser","MessageText","MessageDate","InputGroup","InputText","LabelInput","InputMessage","SendButtonInput","InputTextBox","Button","Chat","messages","setMessages","messageText","username","message","setMessage","on","console","log","handleSubmit","event","preventDefault","date","Date","toTimeString","replace","newMessage","id","current","value","emit","map","m"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useMemo } from 'react';\n\nimport socket from \"../../../services/socket\";\n\nimport { Container, PageTitle, MessageContainer, Message, MessageUser, MessageText, MessageDate, InputGroup, InputText, LabelInput, InputMessage, SendButtonInput, InputTextBox, Button } from './styles';\n\n/*\nsocket.on('recivedMessage', message => {\n    //setMessages([...messages, message]);\n\n    console.log(message);\n\n    const messageContainer = document.getElementById('messageContainer');\n\n    messageContainer.innerHTML +=\n    `<Message key=\"${message.id}\">\n        <MessageText>\n            <MessageUser>${message.username}</MessageUser>\n                ${message.messageText}\n            </MessageText>\n        <MessageDate>${message.date}</MessageDate>\n    </Message>`\n});\n*/\n\nfunction Chat() {\n    const [messages, setMessages] = useState([]);\n    const messageText = useRef();\n    const username = useRef();\n    const [message, setMessage] = useState({});\n\n\n    useMemo(() => { \n        socket.on('recivedMessage', message => {\n            setMessage(message);\n            console.log(message);\n        })\n    }, []);\n\n    useEffect(()=> {\n        setMessages([...messages, message]);\n    },[message]);\n\n    function handleSubmit(event) {\n        event.preventDefault();\n\n        const date = new Date().toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, \"$1\");;\n\n        const newMessage = {\n            id: 0,\n            username: username.current.value,\n            messageText: messageText.current.value,\n            date,\n        }\n\n        socket.emit('sendMessage', newMessage);\n\n        //setMessages([...messages, newMessage]);\n\n        messageText.current.value = '';\n    }\n\n    return (\n        <Container autoComplete=\"off\" onSubmit={handleSubmit}>\n\n            <InputGroup>\n                <LabelInput htmlFor=\"username\">Username</LabelInput>\n\n                <InputText\n                    id=\"username\"\n                    ref={username}\n                    required />\n            </InputGroup>\n\n            <MessageContainer id=\"messageContainer\">\n\n                {messages.map(m => (\n                    <Message key={m.id}>\n                        <MessageText>\n                            <MessageUser>{m.username}</MessageUser>\n                            {m.messageText}\n                        </MessageText>\n                        <MessageDate>{m.date}</MessageDate>\n                    </Message>\n                ))}\n\n            </MessageContainer>\n\n            <InputGroup>\n                <InputMessage\n                    id=\"message\"\n                    placeholder=\"Enviar mensagem...\"\n                    ref={messageText}\n                    required />\n\n                <SendButtonInput>Enviar</SendButtonInput>\n            </InputGroup>\n\n        </Container>\n    );\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}
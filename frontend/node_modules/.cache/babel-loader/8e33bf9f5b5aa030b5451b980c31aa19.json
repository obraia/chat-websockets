{"ast":null,"code":"var _jsxFileName = \"/home/bryan/Programa\\xE7\\xE3o/WebDev/Portifolio - Bryan Diniz/web/src/components/Contact/index.js\";\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport api from '../../services/api';\nimport MaskedInput from 'react-text-mask';\nimport InputMask from \"react-input-mask\";\nimport { ThemeContext } from 'styled-components';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport SuccessMessage from '../Messages/Success';\nimport ErrorMessage from '../Messages/Error';\nimport { Container, Title, InputGroup, InputText, LabelInput, InputTextBox, Button, Confirmed } from './styles';\n\nfunction Contact() {\n  const {\n    title\n  } = useContext(ThemeContext);\n  const [progressbarVisible, setProgressbarVisible] = useState(false);\n  const [validateCaptcha, setValidateCaptcha] = useState(false);\n  const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n  const [errorMessageVisible, setErrorMessageVisible] = useState(false);\n  const name = useRef(null);\n  const phone = useRef(null);\n  const email = useRef(null);\n  const subject = useRef(null);\n  const text = useRef(null);\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    setSuccessMessageVisible(false);\n    setErrorMessageVisible(false);\n    setProgressbarVisible(true);\n    const data = {\n      name: name.current.value,\n      phone: phone.current.value,\n      email: email.current.value,\n      subject: subject.current.value,\n      text: text.current.value\n    };\n\n    try {\n      const response = await api.post('/email', data);\n\n      if (response.status == 200) {\n        name.current.value = null;\n        phone.current.value = null;\n        email.current.value = null;\n        subject.current.value = null;\n        text.current.value = null;\n        setSuccessMessageVisible(true);\n      } else setErrorMessageVisible(true);\n    } catch (error) {\n      setErrorMessageVisible(true);\n    }\n\n    setProgressbarVisible(false);\n  }\n\n  return React.createElement(Container, {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Contato\"), React.createElement(InputGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(LabelInput, {\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Nome\"), React.createElement(InputText, {\n    id: \"name\",\n    ref: name,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })), React.createElement(InputGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(LabelInput, {\n    htmlFor: 'phone',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Telefone\"), React.createElement(InputMask, {\n    mask: \"99/99/9999\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(MaskedInput, {\n    className: \"MaskedInput\",\n    id: \"phone\",\n    ref: phone,\n    mask: ['(', /[1-9]/, /\\d/, ')', ' ', /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/],\n    guide: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  })), React.createElement(InputGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(LabelInput, {\n    htmlFor: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"E-mail\"), React.createElement(InputText, {\n    id: \"email\",\n    ref: email,\n    type: \"email\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })), React.createElement(InputGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(LabelInput, {\n    htmlFor: \"subject\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Assunto\"), React.createElement(InputText, {\n    id: \"subject\",\n    ref: subject,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  })), React.createElement(InputTextBox, {\n    ref: text,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), progressbarVisible ? React.createElement(CircularProgress, {\n    style: {\n      marginBottom: 15\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }) : null, !validateCaptcha ? React.createElement(ReCAPTCHA, {\n    sitekey: \"6Ld5odwUAAAAALZSMRJ1wKE3vszFTFocoP3pC-WB\",\n    onChange: () => setValidateCaptcha(true),\n    theme: title,\n    style: {\n      marginBottom: 15\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }) : React.createElement(Button, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Enviar\"), successMessageVisible ? React.createElement(SuccessMessage, {\n    message: 'Email enviado com sucesso!',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }) : null, errorMessageVisible ? React.createElement(ErrorMessage, {\n    message: 'Erro ao enviar o email.',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }) : null);\n}\n\nexport default Contact;","map":{"version":3,"sources":["/home/bryan/Programação/WebDev/Portifolio - Bryan Diniz/web/src/components/Contact/index.js"],"names":["React","useState","useContext","useEffect","useRef","api","MaskedInput","InputMask","ThemeContext","CircularProgress","ReCAPTCHA","SuccessMessage","ErrorMessage","Container","Title","InputGroup","InputText","LabelInput","InputTextBox","Button","Confirmed","Contact","title","progressbarVisible","setProgressbarVisible","validateCaptcha","setValidateCaptcha","successMessageVisible","setSuccessMessageVisible","errorMessageVisible","setErrorMessageVisible","name","phone","email","subject","text","handleSubmit","event","preventDefault","data","current","value","response","post","status","error","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useRef } from 'react';\n\nimport api from '../../services/api';\n\nimport MaskedInput from 'react-text-mask';\nimport InputMask from \"react-input-mask\"\n\nimport { ThemeContext } from 'styled-components';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ReCAPTCHA from 'react-google-recaptcha';\n\nimport SuccessMessage from '../Messages/Success';\nimport ErrorMessage from '../Messages/Error';\n\nimport { Container, Title, InputGroup, InputText, LabelInput, InputTextBox, Button, Confirmed } from './styles';\n\nfunction Contact() {\n\n    const { title } = useContext(ThemeContext);\n    const [progressbarVisible, setProgressbarVisible] = useState(false);\n    const [validateCaptcha, setValidateCaptcha] = useState(false);\n    const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n    const [errorMessageVisible, setErrorMessageVisible] = useState(false);\n\n    const name = useRef(null);\n    const phone = useRef(null);\n    const email = useRef(null);\n    const subject = useRef(null);\n    const text = useRef(null);\n\n    async function handleSubmit(event) {\n        event.preventDefault();\n\n        setSuccessMessageVisible(false);\n        setErrorMessageVisible(false);\n        setProgressbarVisible(true);\n\n        const data = {\n            name: name.current.value,\n            phone: phone.current.value,\n            email: email.current.value,\n            subject: subject.current.value,\n            text: text.current.value,\n        }\n\n        try {\n            const response = await api.post('/email', data);\n\n            if (response.status == 200) {\n\n                name.current.value = null;\n                phone.current.value = null;\n                email.current.value = null;\n                subject.current.value = null;\n                text.current.value = null;\n\n                setSuccessMessageVisible(true);\n            }\n            else setErrorMessageVisible(true);\n\n        } catch (error) {\n            setErrorMessageVisible(true);\n        }\n\n        setProgressbarVisible(false);\n    }\n\n    return (\n        <Container onSubmit={handleSubmit}>\n\n            <Title>Contato</Title>\n\n            <InputGroup>\n                <LabelInput htmlFor=\"name\">Nome</LabelInput>\n\n                <InputText\n                    id=\"name\"\n                    ref={name}\n                    required />\n            </InputGroup>\n\n            <InputGroup>\n                <LabelInput htmlFor={'phone'}>Telefone</LabelInput>\n\n                <InputMask\n                mask=\"99/99/9999\"/>\n                <MaskedInput\n                    className=\"MaskedInput\"\n                    id=\"phone\"\n                    ref={phone}\n                    mask={['(', /[1-9]/, /\\d/, ')', ' ', /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\n                    guide={true} />\n            </InputGroup>\n\n            <InputGroup>\n                <LabelInput htmlFor=\"email\">E-mail</LabelInput>\n\n                <InputText\n                    id=\"email\"\n                    ref={email}\n                    type=\"email\"\n                    required />\n            </InputGroup>\n\n            <InputGroup>\n                <LabelInput htmlFor=\"subject\">Assunto</LabelInput>\n\n                <InputText\n                    id=\"subject\"\n                    ref={subject}\n                    required />\n            </InputGroup>\n\n            <InputTextBox\n                ref={text}\n                required />\n\n            {progressbarVisible ? <CircularProgress style={{ marginBottom: 15 }} /> : null}\n\n            {!validateCaptcha ?\n\n                <ReCAPTCHA\n                    sitekey=\"6Ld5odwUAAAAALZSMRJ1wKE3vszFTFocoP3pC-WB\"\n                    onChange={() => setValidateCaptcha(true)}\n                    theme={title}\n                    style={{ marginBottom: 15 }} /> : <Button>Enviar</Button>}\n\n            {successMessageVisible ? <SuccessMessage message={'Email enviado com sucesso!'} /> : null}\n            {errorMessageVisible ? <ErrorMessage message={'Erro ao enviar o email.'} /> : null}\n\n        </Container>\n    );\n}\n\nexport default Contact;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/bryan/Programa\\xE7\\xE3o/WebDev/Portifolio - Bryan Diniz/web/src/pages/Projects/Chat/Test/index.js\";\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport socket from \"../../../../services/socket\";\nimport { Container, MessageContainer, Message, MessageUser, MessageText, MessageDate, InputGroup, InputText, LabelInput, InputMessage, SendButtonInput } from './styles';\n\nfunction Chat() {\n  const [messages, setMessages] = useState([]);\n  const [recivedMessage, setRecivedMessage] = useState(null);\n  const [myIdMessage, setMyIdMessage] = useState(0);\n  const [myMessageColor, setMyMessageColor] = useState('');\n  const messageText = useRef();\n  const username = useRef();\n  useMemo(() => {\n    socket.on('recivedMessage', message => {\n      message.from = 'others';\n      setRecivedMessage(message);\n      console.log(message);\n    });\n  }, []);\n  useEffect(() => {\n    if (recivedMessage) setMessages([...messages, recivedMessage]);\n  }, [recivedMessage]);\n  useEffect(() => {}, []);\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    setMyIdMessage(myIdMessage - 1);\n    const date = new Date().toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, \"$1\");\n    ;\n    const newMessage = {\n      from: 'my',\n      id: myIdMessage,\n      username: username.current.value,\n      text: messageText.current.value,\n      color: myMessageColor,\n      date\n    };\n    setMessages([...messages, newMessage]);\n    socket.emit('sendMessage', newMessage);\n    messageText.current.value = '';\n  }\n\n  return React.createElement(Container, {\n    autoComplete: \"off\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(InputGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(LabelInput, {\n    htmlFor: \"username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Username\"), React.createElement(InputText, {\n    id: \"username\",\n    ref: username,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })), React.createElement(MessageContainer, {\n    id: \"messageContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, messages.map(m => React.createElement(Message, {\n    className: m.from,\n    key: m.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(MessageText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(MessageUser, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, m.username, \":\"), m.text), React.createElement(MessageDate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, m.date)))), React.createElement(InputGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(InputMessage, {\n    id: \"message\",\n    placeholder: \"Enviar mensagem...\",\n    ref: messageText,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(SendButtonInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Enviar\")));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/bryan/Programação/WebDev/Portifolio - Bryan Diniz/web/src/pages/Projects/Chat/Test/index.js"],"names":["React","useState","useEffect","useRef","useMemo","socket","Container","MessageContainer","Message","MessageUser","MessageText","MessageDate","InputGroup","InputText","LabelInput","InputMessage","SendButtonInput","Chat","messages","setMessages","recivedMessage","setRecivedMessage","myIdMessage","setMyIdMessage","myMessageColor","setMyMessageColor","messageText","username","on","message","from","console","log","handleSubmit","event","preventDefault","date","Date","toTimeString","replace","newMessage","id","current","value","text","color","emit","map","m"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useMemo } from 'react';\n\nimport socket from \"../../../../services/socket\";\n\nimport { Container, MessageContainer, Message, MessageUser, MessageText, MessageDate, InputGroup, InputText, LabelInput, InputMessage, SendButtonInput } from './styles';\n\nfunction Chat() {\n    const [messages, setMessages] = useState([]);\n    const [recivedMessage, setRecivedMessage] = useState(null);\n    const [myIdMessage, setMyIdMessage] = useState(0);\n    const [myMessageColor, setMyMessageColor] = useState('');\n    \n    const messageText = useRef();\n    const username = useRef();\n\n    useMemo(() => { \n        socket.on('recivedMessage', message => {\n            message.from = 'others';\n            setRecivedMessage(message);\n            console.log(message);\n        })\n    }, []);\n\n    useEffect(()=> {\n        if(recivedMessage) setMessages([...messages, recivedMessage]);\n    },[recivedMessage]);\n\n    useEffect(()=> {\n       \n    },[]);\n\n    function handleSubmit(event) {\n        event.preventDefault();\n\n        setMyIdMessage(myIdMessage-1);\n\n        const date = new Date().toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, \"$1\");;\n\n        const newMessage = {\n            from: 'my',\n            id: myIdMessage,\n            username: username.current.value,\n            text: messageText.current.value,\n            color: myMessageColor,\n            date,\n        }\n\n        setMessages([...messages, newMessage]);\n\n        socket.emit('sendMessage', newMessage);\n\n        messageText.current.value = '';\n    }\n\n    return (\n        <Container autoComplete=\"off\" onSubmit={handleSubmit}>\n\n            <InputGroup>\n                <LabelInput htmlFor=\"username\">Username</LabelInput>\n\n                <InputText\n                    id=\"username\"\n                    ref={username}\n                    required />\n            </InputGroup>\n\n            <MessageContainer id=\"messageContainer\">\n\n                {messages.map(m => (\n                    <Message className={m.from} key={m.id}>\n                        <MessageText>\n                            <MessageUser>{m.username}:</MessageUser>\n                            {m.text}\n                        </MessageText>\n                        <MessageDate>{m.date}</MessageDate>\n                    </Message>\n                ))}\n\n            </MessageContainer>\n\n            <InputGroup>\n                <InputMessage\n                    id=\"message\"\n                    placeholder=\"Enviar mensagem...\"\n                    ref={messageText}\n                    required />\n\n                <SendButtonInput>Enviar</SendButtonInput>\n            </InputGroup>\n\n        </Container>\n    );\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/bryan/Programa\\xE7\\xE3o/WebDev/Portifolio - Bryan Diniz/web/src/pages/Projects/Chat/Test/index.js\";\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { shade, lighten, desaturate, invert, getContrast } from \"polished\";\nimport socket from \"../../../../services/socket\";\nimport { Container, MessageContainer, Message, MessageUser, MessageText, MessageDate, InputGroup, InputText, LabelInput, InputMessage, SendButtonInput } from './styles';\n\nfunction Chat() {\n  const [messages, setMessages] = useState([]);\n  const [recivedMessage, setRecivedMessage] = useState(null);\n  const [myIdMessage, setMyIdMessage] = useState(0);\n  const [myMessageColor, setMyMessageColor] = useState('');\n  const [myMessageTextColor, setMyMessageTextColor] = useState('');\n  const messageText = useRef();\n  const username = useRef();\n  useMemo(() => {\n    socket.on('recivedMessage', message => {\n      message.from = 'others';\n      setRecivedMessage(message);\n      console.log(message);\n    });\n  }, []);\n  useEffect(() => {\n    if (recivedMessage) setMessages([...messages, recivedMessage]);\n  }, [recivedMessage]);\n  useEffect(() => {\n    setMyMessageColor(getRandomColor());\n  }, []);\n\n  function getRandomColor() {\n    let color = '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6);\n    color = desaturate(0.3, lighten(0.2, color));\n    return color;\n  }\n\n  function getConstrastColor() {\n    if (getContrast(myMessageColor, '#fff') < 10) return '#000';else return '#fff';\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    setMyMessageColor(getRandomColor());\n    myMessageTextColor(getConstrastColor());\n    setMyIdMessage(myIdMessage - 1);\n    const date = new Date().toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, \"$1\");\n    ;\n    const newMessage = {\n      from: 'my',\n      id: myIdMessage,\n      username: username.current.value,\n      text: messageText.current.value,\n      color: myMessageColor,\n      date\n    };\n    setMessages([...messages, newMessage]);\n    socket.emit('sendMessage', newMessage);\n    messageText.current.value = '';\n  }\n\n  return React.createElement(Container, {\n    autoComplete: \"off\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(InputGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(LabelInput, {\n    htmlFor: \"username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Username\"), React.createElement(InputText, {\n    id: \"username\",\n    ref: username,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })), React.createElement(MessageContainer, {\n    id: \"messageContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, messages.map(m => React.createElement(Message, {\n    className: m.from,\n    key: m.id,\n    style: {\n      background: m.color\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(MessageText, {\n    style: {\n      color: desaturate(1, invert(m.color))\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(MessageUser, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, m.username, \":\"), m.text), React.createElement(MessageDate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, m.date)))), React.createElement(InputGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(InputMessage, {\n    id: \"message\",\n    placeholder: \"Enviar mensagem...\",\n    ref: messageText,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(SendButtonInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Enviar\")));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/bryan/Programação/WebDev/Portifolio - Bryan Diniz/web/src/pages/Projects/Chat/Test/index.js"],"names":["React","useState","useEffect","useRef","useMemo","shade","lighten","desaturate","invert","getContrast","socket","Container","MessageContainer","Message","MessageUser","MessageText","MessageDate","InputGroup","InputText","LabelInput","InputMessage","SendButtonInput","Chat","messages","setMessages","recivedMessage","setRecivedMessage","myIdMessage","setMyIdMessage","myMessageColor","setMyMessageColor","myMessageTextColor","setMyMessageTextColor","messageText","username","on","message","from","console","log","getRandomColor","color","Math","random","toString","substr","getConstrastColor","handleSubmit","event","preventDefault","date","Date","toTimeString","replace","newMessage","id","current","value","text","emit","map","m","background"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6CC,OAA7C,QAA4D,OAA5D;AACA,SAASC,KAAT,EAAgBC,OAAhB,EAAyBC,UAAzB,EAAqCC,MAArC,EAA6CC,WAA7C,QAAgE,UAAhE;AAEA,OAAOC,MAAP,MAAmB,6BAAnB;AAEA,SAASC,SAAT,EAAoBC,gBAApB,EAAsCC,OAAtC,EAA+CC,WAA/C,EAA4DC,WAA5D,EAAyEC,WAAzE,EAAsFC,UAAtF,EAAkGC,SAAlG,EAA6GC,UAA7G,EAAyHC,YAAzH,EAAuIC,eAAvI,QAA8J,UAA9J;;AAEA,SAASC,IAAT,GAAgB;AACZ,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACwB,cAAD,EAAiBC,iBAAjB,IAAsCzB,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAAC0B,WAAD,EAAcC,cAAd,IAAgC3B,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAAC4B,cAAD,EAAiBC,iBAAjB,IAAsC7B,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAAC8B,kBAAD,EAAqBC,qBAArB,IAA8C/B,QAAQ,CAAC,EAAD,CAA5D;AAEA,QAAMgC,WAAW,GAAG9B,MAAM,EAA1B;AACA,QAAM+B,QAAQ,GAAG/B,MAAM,EAAvB;AAEAC,EAAAA,OAAO,CAAC,MAAM;AACVM,IAAAA,MAAM,CAACyB,EAAP,CAAU,gBAAV,EAA4BC,OAAO,IAAI;AACnCA,MAAAA,OAAO,CAACC,IAAR,GAAe,QAAf;AACAX,MAAAA,iBAAiB,CAACU,OAAD,CAAjB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACH,KAJD;AAKH,GANM,EAMJ,EANI,CAAP;AAQAlC,EAAAA,SAAS,CAAC,MAAK;AACX,QAAGuB,cAAH,EAAmBD,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcE,cAAd,CAAD,CAAX;AACtB,GAFQ,EAEP,CAACA,cAAD,CAFO,CAAT;AAIAvB,EAAAA,SAAS,CAAC,MAAK;AACX4B,IAAAA,iBAAiB,CAACU,cAAc,EAAf,CAAjB;AACH,GAFQ,EAEP,EAFO,CAAT;;AAIA,WAASA,cAAT,GAAyB;AACrB,QAAIC,KAAK,GAAG,MAAI,CAAC,YAAWC,IAAI,CAACC,MAAL,EAAD,GAAgB,QAA3B,EAAqCC,QAArC,CAA8C,EAA9C,EAAkDC,MAAlD,CAAyD,CAAzD,EAA2D,CAA3D,CAAhB;AACAJ,IAAAA,KAAK,GAAGlC,UAAU,CAAC,GAAD,EAAOD,OAAO,CAAC,GAAD,EAAMmC,KAAN,CAAd,CAAlB;AACA,WAAOA,KAAP;AACH;;AAED,WAASK,iBAAT,GAA4B;AACxB,QAAGrC,WAAW,CAACoB,cAAD,EAAiB,MAAjB,CAAX,GAAsC,EAAzC,EAA6C,OAAO,MAAP,CAA7C,KACK,OAAO,MAAP;AACR;;AAED,WAASkB,YAAT,CAAsBC,KAAtB,EAA6B;AACzBA,IAAAA,KAAK,CAACC,cAAN;AAEAnB,IAAAA,iBAAiB,CAACU,cAAc,EAAf,CAAjB;AACAT,IAAAA,kBAAkB,CAACe,iBAAiB,EAAlB,CAAlB;AAEAlB,IAAAA,cAAc,CAACD,WAAW,GAAC,CAAb,CAAd;AAEA,UAAMuB,IAAI,GAAG,IAAIC,IAAJ,GAAWC,YAAX,GAA0BC,OAA1B,CAAkC,yBAAlC,EAA6D,IAA7D,CAAb;AAAgF;AAEhF,UAAMC,UAAU,GAAG;AACfjB,MAAAA,IAAI,EAAE,IADS;AAEfkB,MAAAA,EAAE,EAAE5B,WAFW;AAGfO,MAAAA,QAAQ,EAAEA,QAAQ,CAACsB,OAAT,CAAiBC,KAHZ;AAIfC,MAAAA,IAAI,EAAEzB,WAAW,CAACuB,OAAZ,CAAoBC,KAJX;AAKfhB,MAAAA,KAAK,EAAEZ,cALQ;AAMfqB,MAAAA;AANe,KAAnB;AASA1B,IAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAc+B,UAAd,CAAD,CAAX;AAEA5C,IAAAA,MAAM,CAACiD,IAAP,CAAY,aAAZ,EAA2BL,UAA3B;AAEArB,IAAAA,WAAW,CAACuB,OAAZ,CAAoBC,KAApB,GAA4B,EAA5B;AACH;;AAED,SACI,oBAAC,SAAD;AAAW,IAAA,YAAY,EAAC,KAAxB;AAA8B,IAAA,QAAQ,EAAEV,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAGI,oBAAC,SAAD;AACI,IAAA,EAAE,EAAC,UADP;AAEI,IAAA,GAAG,EAAEb,QAFT;AAGI,IAAA,QAAQ,MAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAFJ,EAWI,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,kBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKX,QAAQ,CAACqC,GAAT,CAAaC,CAAC,IACX,oBAAC,OAAD;AAAS,IAAA,SAAS,EAAEA,CAAC,CAACxB,IAAtB;AAA4B,IAAA,GAAG,EAAEwB,CAAC,CAACN,EAAnC;AACA,IAAA,KAAK,EAAE;AAACO,MAAAA,UAAU,EAAED,CAAC,CAACpB;AAAf,KADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAE;AAACA,MAAAA,KAAK,EAAElC,UAAU,CAAC,CAAD,EAAIC,MAAM,CAACqD,CAAC,CAACpB,KAAH,CAAV;AAAlB,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcoB,CAAC,CAAC3B,QAAhB,MADJ,EAEK2B,CAAC,CAACH,IAFP,CAFJ,EAMI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcG,CAAC,CAACX,IAAhB,CANJ,CADH,CAFL,CAXJ,EA0BI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,YAAD;AACI,IAAA,EAAE,EAAC,SADP;AAEI,IAAA,WAAW,EAAC,oBAFhB;AAGI,IAAA,GAAG,EAAEjB,WAHT;AAII,IAAA,QAAQ,MAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAOI,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ,CA1BJ,CADJ;AAuCH;;AAED,eAAeX,IAAf","sourcesContent":["import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { shade, lighten, desaturate, invert, getContrast } from \"polished\";\n\nimport socket from \"../../../../services/socket\";\n\nimport { Container, MessageContainer, Message, MessageUser, MessageText, MessageDate, InputGroup, InputText, LabelInput, InputMessage, SendButtonInput } from './styles';\n\nfunction Chat() {\n    const [messages, setMessages] = useState([]);\n    const [recivedMessage, setRecivedMessage] = useState(null);\n    const [myIdMessage, setMyIdMessage] = useState(0);\n    const [myMessageColor, setMyMessageColor] = useState('');\n    const [myMessageTextColor, setMyMessageTextColor] = useState('');\n    \n    const messageText = useRef();\n    const username = useRef();\n\n    useMemo(() => { \n        socket.on('recivedMessage', message => {\n            message.from = 'others';\n            setRecivedMessage(message);\n            console.log(message);\n        })\n    }, []);\n\n    useEffect(()=> {\n        if(recivedMessage) setMessages([...messages, recivedMessage]);\n    },[recivedMessage]);\n\n    useEffect(()=> {\n        setMyMessageColor(getRandomColor());\n    },[]);\n\n    function getRandomColor(){\n        let color = '#'+(0x1000000+(Math.random())*0xffffff).toString(16).substr(1,6)\n        color = desaturate(0.3, (lighten(0.2, color)))\n        return color;\n    }\n\n    function getConstrastColor(){\n        if(getContrast(myMessageColor, '#fff') < 10) return '#000';\n        else return '#fff';\n    }\n\n    function handleSubmit(event) {\n        event.preventDefault();\n\n        setMyMessageColor(getRandomColor());\n        myMessageTextColor(getConstrastColor());\n        \n        setMyIdMessage(myIdMessage-1);\n\n        const date = new Date().toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, \"$1\");;\n\n        const newMessage = {\n            from: 'my',\n            id: myIdMessage,\n            username: username.current.value,\n            text: messageText.current.value,\n            color: myMessageColor,\n            date,\n        }\n\n        setMessages([...messages, newMessage]);\n\n        socket.emit('sendMessage', newMessage);\n\n        messageText.current.value = '';\n    }\n\n    return (\n        <Container autoComplete=\"off\" onSubmit={handleSubmit}>\n\n            <InputGroup>\n                <LabelInput htmlFor=\"username\">Username</LabelInput>\n\n                <InputText\n                    id=\"username\"\n                    ref={username}\n                    required />\n            </InputGroup>\n\n            <MessageContainer id=\"messageContainer\">\n\n                {messages.map(m => (\n                    <Message className={m.from} key={m.id} \n                    style={{background: m.color}}>\n                        <MessageText style={{color: desaturate(1, invert(m.color))}}>\n                            <MessageUser>{m.username}:</MessageUser>\n                            {m.text}\n                        </MessageText>\n                        <MessageDate>{m.date}</MessageDate>\n                    </Message>\n                ))}\n\n            </MessageContainer>\n\n            <InputGroup>\n                <InputMessage\n                    id=\"message\"\n                    placeholder=\"Enviar mensagem...\"\n                    ref={messageText}\n                    required />\n\n                <SendButtonInput>Enviar</SendButtonInput>\n            </InputGroup>\n\n        </Container>\n    );\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}
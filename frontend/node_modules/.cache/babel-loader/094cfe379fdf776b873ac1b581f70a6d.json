{"ast":null,"code":"var _jsxFileName = \"/home/bryan/Programa\\xE7\\xE3o/WebDev/Portifolio - Bryan Diniz/web/src/pages/Projects/Chat/index.js\";\nimport React, { useState, useEffect, useContext, useRef, useMemo } from 'react';\nimport io from \"socket.io-client\";\nimport { Container, PageTitle, MessageContainer, Message, MessageUser, MessageText, MessageDate, InputGroup, InputText, LabelInput, InputMessage, SendButtonInput, InputTextBox, Button } from './styles';\nconst socket = io(process.env.REACT_APP_CHATAPP || 'http://192.168.0.109:3333', {});\nsocket.on('connect', () => {\n  console.log('[IO] Connect => Connection established');\n});\n\nfunction Chat() {\n  const [messages, setMessages] = useState([]);\n  const messageText = useRef();\n  const username = useRef();\n  const message = useRef({});\n  socket.on('recivedMessage', message => {\n    message = Object.assign({}, message);\n  });\n  useEffect(() => {\n    setMessages([...messages, message]);\n  }, [message]);\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    const date = new Date().toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, \"$1\");\n    ;\n    const newMessage = {\n      id: 0,\n      username: username.current.value,\n      messageText: messageText.current.value,\n      date\n    };\n    socket.emit('sendMessage', newMessage);\n    setMessages([...messages, newMessage]);\n  }\n\n  return React.createElement(Container, {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(InputGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(LabelInput, {\n    htmlFor: \"username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Username\"), React.createElement(InputText, {\n    id: \"username\",\n    ref: username,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), React.createElement(MessageContainer, {\n    id: \"messageContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, messages.map(m => React.createElement(Message, {\n    key: m.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(MessageText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(MessageUser, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, m.username), m.messageText), React.createElement(MessageDate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, m.date)))), React.createElement(InputGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(InputMessage, {\n    id: \"message\",\n    placeholder: \"Enviar mensagem...\",\n    ref: messageText,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(SendButtonInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Enviar\")));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/bryan/ProgramaÃ§Ã£o/WebDev/Portifolio - Bryan Diniz/web/src/pages/Projects/Chat/index.js"],"names":["React","useState","useEffect","useContext","useRef","useMemo","io","Container","PageTitle","MessageContainer","Message","MessageUser","MessageText","MessageDate","InputGroup","InputText","LabelInput","InputMessage","SendButtonInput","InputTextBox","Button","socket","process","env","REACT_APP_CHATAPP","on","console","log","Chat","messages","setMessages","messageText","username","message","Object","assign","handleSubmit","event","preventDefault","date","Date","toTimeString","replace","newMessage","id","current","value","emit","map","m"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, useRef, useMemo } from 'react';\nimport io from \"socket.io-client\";\n\nimport { Container, PageTitle, MessageContainer, Message, MessageUser, MessageText, MessageDate, InputGroup, InputText, LabelInput, InputMessage, SendButtonInput, InputTextBox, Button } from './styles';\n\nconst socket = io(process.env.REACT_APP_CHATAPP || 'http://192.168.0.109:3333', {});\nsocket.on('connect', () => { console.log('[IO] Connect => Connection established') });\n\nfunction Chat() {\n    const [messages, setMessages] = useState([]);\n    const messageText = useRef();\n    const username = useRef();\n    const message = useRef({});\n\n    socket.on('recivedMessage', message => {\n        message = Object.assign({}, message);\n    });\n\n    useEffect(() => {\n        setMessages([...messages, message]);\n    }, [message]);\n\n    function handleSubmit(event) {\n        event.preventDefault();\n\n        const date = new Date().toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, \"$1\");;\n\n        const newMessage = {\n            id: 0,\n            username: username.current.value,\n            messageText: messageText.current.value,\n            date,\n        }\n\n        socket.emit('sendMessage', newMessage);\n\n\n        setMessages([...messages, newMessage]);\n    }\n\n    return (\n        <Container onSubmit={handleSubmit}>\n\n            <InputGroup>\n                <LabelInput htmlFor=\"username\">Username</LabelInput>\n\n                <InputText\n                    id=\"username\"\n                    ref={username}\n                    required />\n            </InputGroup>\n\n            <MessageContainer id=\"messageContainer\">\n\n                {messages.map(m => (\n                    <Message key={m.id}>\n                        <MessageText>\n                            <MessageUser>{m.username}</MessageUser>\n                            {m.messageText}\n                        </MessageText>\n                        <MessageDate>{m.date}</MessageDate>\n                    </Message>\n                ))}\n\n            </MessageContainer>\n\n            <InputGroup>\n                <InputMessage\n                    id=\"message\"\n                    placeholder=\"Enviar mensagem...\"\n                    ref={messageText}\n                    required />\n\n                <SendButtonInput>Enviar</SendButtonInput>\n            </InputGroup>\n\n        </Container>\n    );\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}
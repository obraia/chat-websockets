{"ast":null,"code":"var _jsxFileName = \"/home/bryan/Programa\\xE7\\xE3o/WebDev/Portifolio - Bryan Diniz/web/src/pages/Projects/Chat/index.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport socket from \"../../../services/socket\";\nimport { Container, PageTitle, MessageContainer, Message, MessageUser, MessageText, MessageDate, InputGroup, InputText, LabelInput, InputMessage, SendButtonInput, InputTextBox, Button } from './styles';\nsocket.on('recivedMessage', message => {\n  //setMessages([...messages, message]);\n  console.log(message);\n  const messageContainer = document.getElementById('messageContainer');\n  messageContainer.innerHTML += `<Message key=\"${message.id}\">\n        <MessageText>\n            <MessageUser>${message.username}</MessageUser>\n                ${message.messageText}\n            </MessageText>\n        <MessageDate>${message.date}</MessageDate>\n    </Message>`;\n});\n\nfunction Chat() {\n  const [messages, setMessages] = useState([]);\n  const messageText = useRef();\n  const username = useRef();\n  /*\n  socket.on('recivedMessage', message => {\n      setMessages([...messages, message]);\n      console.log(message);\n  });\n  */\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    const date = new Date().toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, \"$1\");\n    ;\n    const newMessage = {\n      id: 0,\n      username: username.current.value,\n      messageText: messageText.current.value,\n      date\n    };\n    socket.emit('sendMessage', newMessage);\n    setMessages([...messages, newMessage]);\n    messageText.current.value = '';\n  }\n\n  return React.createElement(Container, {\n    autoComplete: \"off\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(InputGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(LabelInput, {\n    htmlFor: \"username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Username\"), React.createElement(InputText, {\n    id: \"username\",\n    ref: username,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })), React.createElement(MessageContainer, {\n    id: \"messageContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, messages.map(m => React.createElement(Message, {\n    key: m.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(MessageText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(MessageUser, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, m.username), m.messageText), React.createElement(MessageDate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, m.date)))), React.createElement(InputGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(InputMessage, {\n    id: \"message\",\n    placeholder: \"Enviar mensagem...\",\n    ref: messageText,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(SendButtonInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Enviar\")));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/bryan/Programação/WebDev/Portifolio - Bryan Diniz/web/src/pages/Projects/Chat/index.js"],"names":["React","useState","useEffect","useRef","socket","Container","PageTitle","MessageContainer","Message","MessageUser","MessageText","MessageDate","InputGroup","InputText","LabelInput","InputMessage","SendButtonInput","InputTextBox","Button","on","message","console","log","messageContainer","document","getElementById","innerHTML","id","username","messageText","date","Chat","messages","setMessages","handleSubmit","event","preventDefault","Date","toTimeString","replace","newMessage","current","value","emit","map","m"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AAEA,OAAOC,MAAP,MAAmB,0BAAnB;AAEA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,gBAA/B,EAAiDC,OAAjD,EAA0DC,WAA1D,EAAuEC,WAAvE,EAAoFC,WAApF,EAAiGC,UAAjG,EAA6GC,SAA7G,EAAwHC,UAAxH,EAAoIC,YAApI,EAAkJC,eAAlJ,EAAmKC,YAAnK,EAAiLC,MAAjL,QAA+L,UAA/L;AAEAd,MAAM,CAACe,EAAP,CAAU,gBAAV,EAA4BC,OAAO,IAAI;AACnC;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAEA,QAAMG,gBAAgB,GAAGC,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,CAAzB;AAEAF,EAAAA,gBAAgB,CAACG,SAAjB,IACC,iBAAgBN,OAAO,CAACO,EAAG;;2BAELP,OAAO,CAACQ,QAAS;kBAC1BR,OAAO,CAACS,WAAY;;uBAEfT,OAAO,CAACU,IAAK;eANhC;AAQH,CAfD;;AAiBA,SAASC,IAAT,GAAgB;AACZ,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BhC,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM4B,WAAW,GAAG1B,MAAM,EAA1B;AACA,QAAMyB,QAAQ,GAAGzB,MAAM,EAAvB;AAEA;;;;;;;AAOA,WAAS+B,YAAT,CAAsBC,KAAtB,EAA6B;AACzBA,IAAAA,KAAK,CAACC,cAAN;AAEA,UAAMN,IAAI,GAAG,IAAIO,IAAJ,GAAWC,YAAX,GAA0BC,OAA1B,CAAkC,yBAAlC,EAA6D,IAA7D,CAAb;AAAgF;AAEhF,UAAMC,UAAU,GAAG;AACfb,MAAAA,EAAE,EAAE,CADW;AAEfC,MAAAA,QAAQ,EAAEA,QAAQ,CAACa,OAAT,CAAiBC,KAFZ;AAGfb,MAAAA,WAAW,EAAEA,WAAW,CAACY,OAAZ,CAAoBC,KAHlB;AAIfZ,MAAAA;AAJe,KAAnB;AAOA1B,IAAAA,MAAM,CAACuC,IAAP,CAAY,aAAZ,EAA2BH,UAA3B;AAEAP,IAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcQ,UAAd,CAAD,CAAX;AAEAX,IAAAA,WAAW,CAACY,OAAZ,CAAoBC,KAApB,GAA4B,EAA5B;AACH;;AAED,SACI,oBAAC,SAAD;AAAW,IAAA,YAAY,EAAC,KAAxB;AAA8B,IAAA,QAAQ,EAAER,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAGI,oBAAC,SAAD;AACI,IAAA,EAAE,EAAC,UADP;AAEI,IAAA,GAAG,EAAEN,QAFT;AAGI,IAAA,QAAQ,MAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAFJ,EAWI,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,kBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKI,QAAQ,CAACY,GAAT,CAAaC,CAAC,IACX,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,CAAC,CAAClB,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAckB,CAAC,CAACjB,QAAhB,CADJ,EAEKiB,CAAC,CAAChB,WAFP,CADJ,EAKI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcgB,CAAC,CAACf,IAAhB,CALJ,CADH,CAFL,CAXJ,EAyBI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,YAAD;AACI,IAAA,EAAE,EAAC,SADP;AAEI,IAAA,WAAW,EAAC,oBAFhB;AAGI,IAAA,GAAG,EAAED,WAHT;AAII,IAAA,QAAQ,MAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAOI,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ,CAzBJ,CADJ;AAsCH;;AAED,eAAeE,IAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nimport socket from \"../../../services/socket\";\n\nimport { Container, PageTitle, MessageContainer, Message, MessageUser, MessageText, MessageDate, InputGroup, InputText, LabelInput, InputMessage, SendButtonInput, InputTextBox, Button } from './styles';\n\nsocket.on('recivedMessage', message => {\n    //setMessages([...messages, message]);\n\n    console.log(message);\n\n    const messageContainer = document.getElementById('messageContainer');\n\n    messageContainer.innerHTML +=\n    `<Message key=\"${message.id}\">\n        <MessageText>\n            <MessageUser>${message.username}</MessageUser>\n                ${message.messageText}\n            </MessageText>\n        <MessageDate>${message.date}</MessageDate>\n    </Message>`\n});\n\nfunction Chat() {\n    const [messages, setMessages] = useState([]);\n    const messageText = useRef();\n    const username = useRef();\n\n    /*\n    socket.on('recivedMessage', message => {\n        setMessages([...messages, message]);\n        console.log(message);\n    });\n    */\n\n    function handleSubmit(event) {\n        event.preventDefault();\n\n        const date = new Date().toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, \"$1\");;\n\n        const newMessage = {\n            id: 0,\n            username: username.current.value,\n            messageText: messageText.current.value,\n            date,\n        }\n\n        socket.emit('sendMessage', newMessage);\n\n        setMessages([...messages, newMessage]);\n\n        messageText.current.value = '';\n    }\n\n    return (\n        <Container autoComplete=\"off\" onSubmit={handleSubmit}>\n\n            <InputGroup>\n                <LabelInput htmlFor=\"username\">Username</LabelInput>\n\n                <InputText\n                    id=\"username\"\n                    ref={username}\n                    required />\n            </InputGroup>\n\n            <MessageContainer id=\"messageContainer\">\n\n                {messages.map(m => (\n                    <Message key={m.id}>\n                        <MessageText>\n                            <MessageUser>{m.username}</MessageUser>\n                            {m.messageText}\n                        </MessageText>\n                        <MessageDate>{m.date}</MessageDate>\n                    </Message>\n                ))}\n\n            </MessageContainer>\n\n            <InputGroup>\n                <InputMessage\n                    id=\"message\"\n                    placeholder=\"Enviar mensagem...\"\n                    ref={messageText}\n                    required />\n\n                <SendButtonInput>Enviar</SendButtonInput>\n            </InputGroup>\n\n        </Container>\n    );\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}